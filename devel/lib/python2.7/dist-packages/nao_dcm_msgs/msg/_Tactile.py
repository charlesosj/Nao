# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nao_dcm_msgs/Tactile.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Tactile(genpy.Message):
  _md5sum = "d8e6e983141612945d4fe93bd0192fe3"
  _type = "nao_dcm_msgs/Tactile"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 stateUnPressed=0
uint8 statePressed=1

uint8 HeadTouchRear
uint8 HeadTouchMiddle
uint8 HeadTouchFront

uint8 LeftTouchBack
uint8 LeftTouchLeft
uint8 LeftTouchRight

uint8 RightTouchBack
uint8 RightTouchLeft
uint8 RightTouchRight"""
  # Pseudo-constants
  stateUnPressed = 0
  statePressed = 1

  __slots__ = ['HeadTouchRear','HeadTouchMiddle','HeadTouchFront','LeftTouchBack','LeftTouchLeft','LeftTouchRight','RightTouchBack','RightTouchLeft','RightTouchRight']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       HeadTouchRear,HeadTouchMiddle,HeadTouchFront,LeftTouchBack,LeftTouchLeft,LeftTouchRight,RightTouchBack,RightTouchLeft,RightTouchRight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Tactile, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.HeadTouchRear is None:
        self.HeadTouchRear = 0
      if self.HeadTouchMiddle is None:
        self.HeadTouchMiddle = 0
      if self.HeadTouchFront is None:
        self.HeadTouchFront = 0
      if self.LeftTouchBack is None:
        self.LeftTouchBack = 0
      if self.LeftTouchLeft is None:
        self.LeftTouchLeft = 0
      if self.LeftTouchRight is None:
        self.LeftTouchRight = 0
      if self.RightTouchBack is None:
        self.RightTouchBack = 0
      if self.RightTouchLeft is None:
        self.RightTouchLeft = 0
      if self.RightTouchRight is None:
        self.RightTouchRight = 0
    else:
      self.HeadTouchRear = 0
      self.HeadTouchMiddle = 0
      self.HeadTouchFront = 0
      self.LeftTouchBack = 0
      self.LeftTouchLeft = 0
      self.LeftTouchRight = 0
      self.RightTouchBack = 0
      self.RightTouchLeft = 0
      self.RightTouchRight = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9B.pack(_x.HeadTouchRear, _x.HeadTouchMiddle, _x.HeadTouchFront, _x.LeftTouchBack, _x.LeftTouchLeft, _x.LeftTouchRight, _x.RightTouchBack, _x.RightTouchLeft, _x.RightTouchRight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.HeadTouchRear, _x.HeadTouchMiddle, _x.HeadTouchFront, _x.LeftTouchBack, _x.LeftTouchLeft, _x.LeftTouchRight, _x.RightTouchBack, _x.RightTouchLeft, _x.RightTouchRight,) = _struct_9B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9B.pack(_x.HeadTouchRear, _x.HeadTouchMiddle, _x.HeadTouchFront, _x.LeftTouchBack, _x.LeftTouchLeft, _x.LeftTouchRight, _x.RightTouchBack, _x.RightTouchLeft, _x.RightTouchRight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.HeadTouchRear, _x.HeadTouchMiddle, _x.HeadTouchFront, _x.LeftTouchBack, _x.LeftTouchLeft, _x.LeftTouchRight, _x.RightTouchBack, _x.RightTouchLeft, _x.RightTouchRight,) = _struct_9B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9B = struct.Struct("<9B")
