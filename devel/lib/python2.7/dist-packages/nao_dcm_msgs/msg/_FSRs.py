# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nao_dcm_msgs/FSRs.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FSRs(genpy.Message):
  _md5sum = "5e046ced61ee0ee10ac4f89b70710d18"
  _type = "nao_dcm_msgs/FSRs"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 LeftFrontLeft
float32 LeftFrontRight
float32 LeftRearLeft
float32 LeftRearRight
float32 LeftTotalWeight

float32 LeftCOPx
float32 LeftCOPy

float32 RightFrontLeft
float32 RightFrontRight
float32 RightRearLeft
float32 RightRearRight
float32 RightTotalWeight

float32 RightCOPx
float32 RightCOPy"""
  __slots__ = ['LeftFrontLeft','LeftFrontRight','LeftRearLeft','LeftRearRight','LeftTotalWeight','LeftCOPx','LeftCOPy','RightFrontLeft','RightFrontRight','RightRearLeft','RightRearRight','RightTotalWeight','RightCOPx','RightCOPy']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LeftFrontLeft,LeftFrontRight,LeftRearLeft,LeftRearRight,LeftTotalWeight,LeftCOPx,LeftCOPy,RightFrontLeft,RightFrontRight,RightRearLeft,RightRearRight,RightTotalWeight,RightCOPx,RightCOPy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FSRs, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.LeftFrontLeft is None:
        self.LeftFrontLeft = 0.
      if self.LeftFrontRight is None:
        self.LeftFrontRight = 0.
      if self.LeftRearLeft is None:
        self.LeftRearLeft = 0.
      if self.LeftRearRight is None:
        self.LeftRearRight = 0.
      if self.LeftTotalWeight is None:
        self.LeftTotalWeight = 0.
      if self.LeftCOPx is None:
        self.LeftCOPx = 0.
      if self.LeftCOPy is None:
        self.LeftCOPy = 0.
      if self.RightFrontLeft is None:
        self.RightFrontLeft = 0.
      if self.RightFrontRight is None:
        self.RightFrontRight = 0.
      if self.RightRearLeft is None:
        self.RightRearLeft = 0.
      if self.RightRearRight is None:
        self.RightRearRight = 0.
      if self.RightTotalWeight is None:
        self.RightTotalWeight = 0.
      if self.RightCOPx is None:
        self.RightCOPx = 0.
      if self.RightCOPy is None:
        self.RightCOPy = 0.
    else:
      self.LeftFrontLeft = 0.
      self.LeftFrontRight = 0.
      self.LeftRearLeft = 0.
      self.LeftRearRight = 0.
      self.LeftTotalWeight = 0.
      self.LeftCOPx = 0.
      self.LeftCOPy = 0.
      self.RightFrontLeft = 0.
      self.RightFrontRight = 0.
      self.RightRearLeft = 0.
      self.RightRearRight = 0.
      self.RightTotalWeight = 0.
      self.RightCOPx = 0.
      self.RightCOPy = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_14f.pack(_x.LeftFrontLeft, _x.LeftFrontRight, _x.LeftRearLeft, _x.LeftRearRight, _x.LeftTotalWeight, _x.LeftCOPx, _x.LeftCOPy, _x.RightFrontLeft, _x.RightFrontRight, _x.RightRearLeft, _x.RightRearRight, _x.RightTotalWeight, _x.RightCOPx, _x.RightCOPy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.LeftFrontLeft, _x.LeftFrontRight, _x.LeftRearLeft, _x.LeftRearRight, _x.LeftTotalWeight, _x.LeftCOPx, _x.LeftCOPy, _x.RightFrontLeft, _x.RightFrontRight, _x.RightRearLeft, _x.RightRearRight, _x.RightTotalWeight, _x.RightCOPx, _x.RightCOPy,) = _struct_14f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_14f.pack(_x.LeftFrontLeft, _x.LeftFrontRight, _x.LeftRearLeft, _x.LeftRearRight, _x.LeftTotalWeight, _x.LeftCOPx, _x.LeftCOPy, _x.RightFrontLeft, _x.RightFrontRight, _x.RightRearLeft, _x.RightRearRight, _x.RightTotalWeight, _x.RightCOPx, _x.RightCOPy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.LeftFrontLeft, _x.LeftFrontRight, _x.LeftRearLeft, _x.LeftRearRight, _x.LeftTotalWeight, _x.LeftCOPx, _x.LeftCOPy, _x.RightFrontLeft, _x.RightFrontRight, _x.RightRearLeft, _x.RightRearRight, _x.RightTotalWeight, _x.RightCOPx, _x.RightCOPy,) = _struct_14f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_14f = struct.Struct("<14f")
