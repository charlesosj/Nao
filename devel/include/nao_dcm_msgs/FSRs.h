// Generated by gencpp from file nao_dcm_msgs/FSRs.msg
// DO NOT EDIT!


#ifndef NAO_DCM_MSGS_MESSAGE_FSRS_H
#define NAO_DCM_MSGS_MESSAGE_FSRS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nao_dcm_msgs
{
template <class ContainerAllocator>
struct FSRs_
{
  typedef FSRs_<ContainerAllocator> Type;

  FSRs_()
    : LeftFrontLeft(0.0)
    , LeftFrontRight(0.0)
    , LeftRearLeft(0.0)
    , LeftRearRight(0.0)
    , LeftTotalWeight(0.0)
    , LeftCOPx(0.0)
    , LeftCOPy(0.0)
    , RightFrontLeft(0.0)
    , RightFrontRight(0.0)
    , RightRearLeft(0.0)
    , RightRearRight(0.0)
    , RightTotalWeight(0.0)
    , RightCOPx(0.0)
    , RightCOPy(0.0)  {
    }
  FSRs_(const ContainerAllocator& _alloc)
    : LeftFrontLeft(0.0)
    , LeftFrontRight(0.0)
    , LeftRearLeft(0.0)
    , LeftRearRight(0.0)
    , LeftTotalWeight(0.0)
    , LeftCOPx(0.0)
    , LeftCOPy(0.0)
    , RightFrontLeft(0.0)
    , RightFrontRight(0.0)
    , RightRearLeft(0.0)
    , RightRearRight(0.0)
    , RightTotalWeight(0.0)
    , RightCOPx(0.0)
    , RightCOPy(0.0)  {
  (void)_alloc;
    }



   typedef float _LeftFrontLeft_type;
  _LeftFrontLeft_type LeftFrontLeft;

   typedef float _LeftFrontRight_type;
  _LeftFrontRight_type LeftFrontRight;

   typedef float _LeftRearLeft_type;
  _LeftRearLeft_type LeftRearLeft;

   typedef float _LeftRearRight_type;
  _LeftRearRight_type LeftRearRight;

   typedef float _LeftTotalWeight_type;
  _LeftTotalWeight_type LeftTotalWeight;

   typedef float _LeftCOPx_type;
  _LeftCOPx_type LeftCOPx;

   typedef float _LeftCOPy_type;
  _LeftCOPy_type LeftCOPy;

   typedef float _RightFrontLeft_type;
  _RightFrontLeft_type RightFrontLeft;

   typedef float _RightFrontRight_type;
  _RightFrontRight_type RightFrontRight;

   typedef float _RightRearLeft_type;
  _RightRearLeft_type RightRearLeft;

   typedef float _RightRearRight_type;
  _RightRearRight_type RightRearRight;

   typedef float _RightTotalWeight_type;
  _RightTotalWeight_type RightTotalWeight;

   typedef float _RightCOPx_type;
  _RightCOPx_type RightCOPx;

   typedef float _RightCOPy_type;
  _RightCOPy_type RightCOPy;




  typedef boost::shared_ptr< ::nao_dcm_msgs::FSRs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_dcm_msgs::FSRs_<ContainerAllocator> const> ConstPtr;

}; // struct FSRs_

typedef ::nao_dcm_msgs::FSRs_<std::allocator<void> > FSRs;

typedef boost::shared_ptr< ::nao_dcm_msgs::FSRs > FSRsPtr;
typedef boost::shared_ptr< ::nao_dcm_msgs::FSRs const> FSRsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nao_dcm_msgs::FSRs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nao_dcm_msgs::FSRs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nao_dcm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nao_dcm_msgs': ['/home/charles/catkin_ws/src/nao_dcm/nao_dcm_robot/nao_dcm_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nao_dcm_msgs::FSRs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nao_dcm_msgs::FSRs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_dcm_msgs::FSRs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_dcm_msgs::FSRs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_dcm_msgs::FSRs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_dcm_msgs::FSRs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nao_dcm_msgs::FSRs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e046ced61ee0ee10ac4f89b70710d18";
  }

  static const char* value(const ::nao_dcm_msgs::FSRs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e046ced61ee0ee1ULL;
  static const uint64_t static_value2 = 0x0ac4f89b70710d18ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_dcm_msgs::FSRs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nao_dcm_msgs/FSRs";
  }

  static const char* value(const ::nao_dcm_msgs::FSRs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nao_dcm_msgs::FSRs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 LeftFrontLeft\n\
float32 LeftFrontRight\n\
float32 LeftRearLeft\n\
float32 LeftRearRight\n\
float32 LeftTotalWeight\n\
\n\
float32 LeftCOPx\n\
float32 LeftCOPy\n\
\n\
float32 RightFrontLeft\n\
float32 RightFrontRight\n\
float32 RightRearLeft\n\
float32 RightRearRight\n\
float32 RightTotalWeight\n\
\n\
float32 RightCOPx\n\
float32 RightCOPy\n\
";
  }

  static const char* value(const ::nao_dcm_msgs::FSRs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nao_dcm_msgs::FSRs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LeftFrontLeft);
      stream.next(m.LeftFrontRight);
      stream.next(m.LeftRearLeft);
      stream.next(m.LeftRearRight);
      stream.next(m.LeftTotalWeight);
      stream.next(m.LeftCOPx);
      stream.next(m.LeftCOPy);
      stream.next(m.RightFrontLeft);
      stream.next(m.RightFrontRight);
      stream.next(m.RightRearLeft);
      stream.next(m.RightRearRight);
      stream.next(m.RightTotalWeight);
      stream.next(m.RightCOPx);
      stream.next(m.RightCOPy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FSRs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_dcm_msgs::FSRs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nao_dcm_msgs::FSRs_<ContainerAllocator>& v)
  {
    s << indent << "LeftFrontLeft: ";
    Printer<float>::stream(s, indent + "  ", v.LeftFrontLeft);
    s << indent << "LeftFrontRight: ";
    Printer<float>::stream(s, indent + "  ", v.LeftFrontRight);
    s << indent << "LeftRearLeft: ";
    Printer<float>::stream(s, indent + "  ", v.LeftRearLeft);
    s << indent << "LeftRearRight: ";
    Printer<float>::stream(s, indent + "  ", v.LeftRearRight);
    s << indent << "LeftTotalWeight: ";
    Printer<float>::stream(s, indent + "  ", v.LeftTotalWeight);
    s << indent << "LeftCOPx: ";
    Printer<float>::stream(s, indent + "  ", v.LeftCOPx);
    s << indent << "LeftCOPy: ";
    Printer<float>::stream(s, indent + "  ", v.LeftCOPy);
    s << indent << "RightFrontLeft: ";
    Printer<float>::stream(s, indent + "  ", v.RightFrontLeft);
    s << indent << "RightFrontRight: ";
    Printer<float>::stream(s, indent + "  ", v.RightFrontRight);
    s << indent << "RightRearLeft: ";
    Printer<float>::stream(s, indent + "  ", v.RightRearLeft);
    s << indent << "RightRearRight: ";
    Printer<float>::stream(s, indent + "  ", v.RightRearRight);
    s << indent << "RightTotalWeight: ";
    Printer<float>::stream(s, indent + "  ", v.RightTotalWeight);
    s << indent << "RightCOPx: ";
    Printer<float>::stream(s, indent + "  ", v.RightCOPx);
    s << indent << "RightCOPy: ";
    Printer<float>::stream(s, indent + "  ", v.RightCOPy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAO_DCM_MSGS_MESSAGE_FSRS_H
